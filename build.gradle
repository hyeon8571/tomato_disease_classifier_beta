plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.9'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'

}

group = 'tomato'
version = '0.0.1-SNAPSHOT'


java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // https://mvnrepository.com/artifact/com.auth0/java-jwt
    implementation group: 'com.auth0', name: 'java-jwt', version: '4.2.1'


    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'

    implementation group: 'org.webjars', name: 'jquery', version: '3.6.0'

    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'

    //Querydsl 추가
    implementation 'com.querydsl:querydsl-jpa'
    implementation 'com.querydsl:querydsl-core'
    implementation 'com.querydsl:querydsl-collections'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
}

tasks.named('test') {
    useJUnitPlatform()
}

// Querydsl 설정부
// Querydsl의 Q클래스를 빌드 디렉토리에서 꺼내기 위해 사용, 인텔리제이에서 생길 수 있는 잠재적인 문제를 피하기 위해, 기본값을 이용하여 큐클래스를 생상하면 빌드 디렉토리에 큐클래스가 생김, gradle 빌드할때 스캔하는 영역과 인텔리제이가 빌드할때 스캔하는 영역에 차이가 있음, 이 차이로 인해 인텔리제이가 빌드를 실행할 때와 그래들이 빌드를 실행할때 2번 스캔하면서 충돌이 일어나서 중복 문제가 발생
def generated = 'src/main/generated'
// query QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile){
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [ generated ]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}